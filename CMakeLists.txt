cmake_minimum_required(VERSION 3.0)

project(ofxNNGAll)

#环境变量
#INCLUDE(./cmake/set_system_env.cmake)
#INCLUDE(./cmake/functions.cmake)


set(CMAKE_CXX_STANDARD 11)

#set(SHARED_LIBRARY_SUFFIX ".osl")
set(INC_BASE_DIR "${PROJECT_SOURCE_DIR}/src")
MESSAGE(STATUS "INC_BASE_DIR=" ${INC_BASE_DIR})
set(EXPORT_INCLUDE ${PROJECT_SOURCE_DIR}/include)
MESSAGE(STATUS "EXPORT_INCLUDE= ${EXPORT_INCLUDE} ")

FILE(GLOB_RECURSE INC_FILES ${INC_BASE_DIR}/*.h ${INC_BASE_DIR}/*.hpp)


# C++ compiler flags
add_definitions("${SDK_CPP_DEFINES} -DHAVE_OT -DHAVE_UCDN -DHB_NO_MT -DFT2_BUILD_LIBRARY -DUSE_STD_REGEX -DBOOST_ALL_NO_LIB -DCRYPTOPP_DISABLE_ASM -DCRYPTOPP_DISABLE_SSE2 -DNDEBUG")

#set(CMAKE_BUILD_TYPE Debug)
if(WIN32)
    add_definitions("-DNOMINMAX -D_SCL_SECURE_NO_WARNINGS -D_CRT_SECURE_NO_WARNINGS -DSQLITE_OS_WINRT -DSQLITE_OMIT_WAL -DGL_GLEXT_PROTOTYPES")
    set(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} /wd4244")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4244 /EHs /GR")
    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /Os")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Os")
ELSE ()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -fexec-charset=GBK ")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -std=c++11")
endif(WIN32)

#编译器选项
SET(CMAKE_EXE_LINKER_FLAGS ${_PLATFORM}  CACHE STRING INTERNAL FORCE)
SET(CMAKE_MODULE_LINKER_FLAGS ${_PLATFORM}  CACHE STRING INTERNAL FORCE)
SET(CMAKE_SHARED_LINKER_FLAGS ${_PLATFORM}  CACHE STRING INTERNAL FORCE)
SET(CMAKE_STATIC_LINKER_FLAGS ${_PLATFORM}  CACHE STRING INTERNAL FORCE)
IF(MSVC)
     SET(CMAKE_C_STANDARD_LIBRARIES   "%(AdditionalDependencies)" CACHE STRING INTERNAL FORCE)
    SET(CMAKE_C_FLAGS_DEBUG          "/MP /MTd /Zi /Od /W1 /DDEBUG" CACHE STRING INTERNAL FORCE)
    SET(CMAKE_C_FLAGS_MINSIZEREL     "/MP /MT /O1 /W1 /DNDEBUG" CACHE STRING INTERNAL FORCE)
    SET(CMAKE_C_FLAGS_RELEASE        "/MP /MT /Zi /O2  /W1 /DNDEBUG" CACHE STRING INTERNAL FORCE)
    SET(CMAKE_C_FLAGS_RELWITHDEBINFO "/MP /MT /Zi /Od /W1 /D NDEBUG" CACHE STRING INTERNAL FORCE)

    SET(CMAKE_CXX_STANDARD_LIBRARIES   ${CMAKE_C_STANDARD_LIBRARIES} CACHE STRING INTERNAL FORCE)
    SET(CMAKE_CXX_FLAGS_DEBUG          ${CMAKE_C_FLAGS_DEBUG} CACHE STRING INTERNAL FORCE)
    SET(CMAKE_CXX_FLAGS_MINSIZEREL     ${CMAKE_C_FLAGS_MINSIZEREL} CACHE STRING INTERNAL FORCE)
    SET(CMAKE_CXX_FLAGS_RELEASE        ${CMAKE_C_FLAGS_RELEASE} CACHE STRING INTERNAL FORCE)
    SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO ${CMAKE_C_FLAGS_RELWITHDEBINFO} CACHE STRING INTERNAL FORCE)
    
    SET(CMAKE_EXE_LINKER_FLAGS         "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:WINDOWS")
    SET(CMAKE_EXE_LINKER_FLAGS         "${CMAKE_EXE_LINKER_FLAGS} /ignore:4099")
    SET(CMAKE_SHARED_LINKER_FLAGS      ${CMAKE_SHARED_LINKER_FLAGS} /ignore:4099)
    SET(CMAKE_STATIC_LINKER_FLAGS      ${CMAKE_STATIC_LINKER_FLAGS} /ignore:4099)

    #release 待pdb 调试信息生成
    SET(CMAKE_EXE_LINKER_FLAGS_RELEASE         "${CMAKE_EXE_LINKER_FLAGS} /DEBUG")
    SET(CMAKE_SHARED_LINKER_FLAGS_RELEASE      "${CMAKE_SHARED_LINKER_FLAGS} /DEBUG ")
    SET(CMAKE_STATIC_LINKER_FLAGS_RELEASE      "${CMAKE_STATIC_LINKER_FLAGS} /DEBUG ")
    
    SET(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} /Zc:__cplusplus /Zc:preprocessor")
ELSE()
#    SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAG} -o0 -Wall -g -ggdb" CACHE STRING INTERNAL FORCE)
#    SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAG} -o3 -Wall" CACHE STRING INTERNAL FORCE)
    SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-rpath,.")
    SET(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} -Wl,-rpath,.")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} -Wl,-rpath,.")

    IF(${Machine} MATCHES "/machine:x64")
    #    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64")
    ENDIF()
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")        #精度损失改为警告
    SET(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS}  -fpermissive")
ENDIF()
MESSAGE(STATUS "CMAKE_CXX_FLAGS=" ${CMAKE_CXX_FLAGS})
MESSAGE(STATUS "CMAKE_CXX_FLAGS_DEBUG=" ${CMAKE_CXX_FLAGS_DEBUG})
MESSAGE(STATUS "CMAKE_CXX_FLAGS_RELEASE=" ${CMAKE_CXX_FLAGS_RELEASE})

#指定执行文件、链接库输出目录
SET(TEMP_DIR)
IF(MSVC)
    SET(TEMP_DIR ${CMAKE_SOURCE_DIR}/output/${PlatformToolsetVersion}/${PlatformName})
ELSE()
    SET(TEMP_DIR ${CMAKE_SOURCE_DIR}/output/${SYSTEM_NAME})
ENDIF()
SET(OUTPUT_DIR ${TEMP_DIR}/$<$<CONFIG:Debug>:Debug>$<$<CONFIG:Release>:Release>$<$<CONFIG:RelWithDebInfo>:RelWithDebInfo>)
MESSAGE(STATUS "OUTPUT_DIR=" ${OUTPUT_DIR})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${OUTPUT_DIR})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${OUTPUT_DIR})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_DIR})
MESSAGE(STATUS "CMAKE_RUNTIME_OUTPUT_DIRECTORY=" ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
MESSAGE(STATUS "CMAKE_LIBRARY_OUTPUT_DIRECTORY=" ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
MESSAGE(STATUS "CMAKE_ARCHIVE_OUTPUT_DIRECTORY=" ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})

#处理器架构x86/x64/arm
IF(DEFINED ENV{Machine})
    SET(Machine $ENV{Machine} CACHE STRING "Machine: /machine:x86, /machine:x64, /machine:aarch64" FORCE)
ELSE()
    SET(Machine "/machine:x64" CACHE STRING "Machine: /machine:x86, /machine:x64, /machine:aarch64" FORCE)
ENDIF()
IF(NOT Machine MATCHES "/machine:x86")
    IF(NOT Machine MATCHES "/machine:x64")
        IF(NOT Machine MATCHES "/machine:aarch64")
            MESSAGE(FATAL_ERROR "Do not support machine: " ${Machine})
        ENDIF()
    ENDIF()
ENDIF()
MESSAGE(STATUS "Machine=" ${Machine})
#添加工程
MESSAGE(STATUS "\n>> Loading projects ...")

# 引入子目录
ADD_SUBDIRECTORY(src)
ADD_SUBDIRECTORY(Demo)

